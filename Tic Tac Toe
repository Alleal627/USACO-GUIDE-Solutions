// Alex Alvarez Morales
#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
/// Macros
//#define int long long
#define sz size()
#define ull unsigned long long
#define ld long double
#define vi vector<int>
#define ii pair<int, int>
#define iii pair<int, ii>
#define vii vector<ii>
#define f first
#define s second
#define s1 s.f
//#define t s.s
#define pb push_back
#define pp pop_back
#define fl '\n'
#define inf 1e9 + 1;
#define gcd __gcd
#define el endl
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define IOS                           \
    ios_base::sync_with_stdio(false); \
    cin.tie(nullptr);                 \
    cout.tie(nullptr);

using namespace std;

int x1[] = {0 , 1};
int y2[] = {1 , 0};

void solve(){
    char a[8][8];
    set<string>st;
    int cont1 = 0 , cont2 = 0;
    for(int i = 0 ; i < 8 ; i++){
        for(int y = 0 ; y < 8 ; y++){
            a[i][y] = '0';
            }
        }

    for(int i = 2 ; i < 5 ; i++){
        for(int y = 2 ; y < 5 ; y++){
            cin >> a[i][y];
            }
        }

     for(int i = 2 ; i < 5 ; i++){
        for(int y = 2 ; y < 5 ; y++){

            for(int z = 0 ; z < 2 ; z++){
                vector<char>act;
                if(x1[z] == 0){
                    act.pb(a[i][y]);
                    act.pb(a[i][y + y2[z]]);
                    act.pb(a[i][y + (y2[z] * 2)]);
                    }
                else if(y2[z] == 0){
                    act.pb(a[i][y]);
                    act.pb(a[i + x1[z]][y]);
                    act.pb(a[i + (x1[z] * 2)][y]);
                    }
                bool ok = 0;
                for(char c : act){
                    if(c == '0')
                    ok = 1;
                    }
                sort(begin(act) , end(act));
                if(ok == 0 && act[1] == act[2] && act[0] == act[1]){
                if(ok == 0){
                     string k = "";
                     k.pb(act[0]);
                     st.insert(k);
                    }
                }

                else if(act[1] == act[2] || act[0] == act[1] || act[2] == act[0]){
                    if(ok == 0){
                    string k = "";
                    k.pb(act[0]);
                    k.pb(act[2]);
                    st.insert(k);
                    }
                }


                }
            }
        }

        vector<char>act;

        act.pb(a[3][3]);
        act.pb(a[4][4]);
        act.pb(a[2][2]);

        sort(begin(act) , end(act));

        if(act[1] == act[2] && act[0] == act[1]){
            string k = "";
            k.pb(act[0]);
            st.insert(k);
            }

        else if(act[1] == act[2] || act[0] == act[1] || act[2] == act[0]){
            string k = "";
            k.pb(act[0]);
            k.pb(act[2]);
            st.insert(k);
            }

        act.clear();

        act.pb(a[2][4]);
        act.pb(a[3][3]);
        act.pb(a[4][2]);

        sort(begin(act) , end(act));

          if(act[1] == act[2] && act[0] == act[1]){
            string k = "";
            k.pb(act[0]);
            st.insert(k);
                }

         else if(act[1] == act[2] || act[0] == act[1] || act[2] == act[0]){
             string k = "";
            k.pb(act[0]);
            k.pb(act[2]);
            st.insert(k);

                }

        cont1 = 0 , cont2 = 0;
        for(auto i : st){
            if(i.size() == 1)
            cont1++;

            else
            cont2++;
            }
       cout << cont1 << '\n' << cont2;

}

int32_t main()
{
    freopen("tttt.in" , "r" , stdin);
    freopen("tttt.out" , "w" , stdout);
    solve();
}
/*
Recuerda el overflow aunque no lo veas
*/
