// Alex Alvarez Morales
#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
/// Macros
#define ll long long
#define sz size()
#define ull unsigned long long
#define ld long double
#define vi vector<int>
#define ii pair<int, int>
#define iii pair<int, ii>
#define vii vector<ii>
#define f first
#define s second
#define s1 s.f
#define t s.s
#define pb push_back
#define fl '\n'
#define el endl
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define IOS                           \
    ios_base::sync_with_stdio(false); \
    cin.tie(nullptr);                 \
    cout.tie(nullptr);

using namespace std;

void setIO(string name = "") {
	cin.tie(0)->sync_with_stdio(0);
	if ((int)name.size()) {
		freopen((name + ".in").c_str(), "r", stdin);
		freopen((name + ".out").c_str(), "w", stdout);
	}
}

struct cows{
int x;
string str;
int z;
};
bool compare(cows a , cows b){
    return (-a.x > -b.x);
    }

int x = 1;
const int mxn = 1e6 + 5 , inf = 1e9;
map<string ,int>m = {{"Bessie" , 7} , {"Elsie" , 7 } , {"Mildred" , 7}};

/*
que tal si al quitarle al mayor sigue siendo el mayor y no hay que cambiarlo ?
*/
vector<string>all_maxs(int maxs){
    vector<string>v;
    for(auto i : m){
        if(i.s == maxs)
        v.pb(i.f);
        }
    return v;
    }
void solve(){
    int n , maxs = 7 , sol = 0; cin >> n;
    vector<cows>v(n);

    for(int i = 0 ; i < n ; i++){

       cin >> v[i].x >> v[i].str >> v[i].z;
       }

    sort(begin(v) , end(v) , compare);

    for(int i = 0 ; i < n ; i++){
        maxs = max({m["Bessie"] , m["Mildred"] , m["Elsie"]});
        vector<string>act = all_maxs(maxs); sort(begin(act) , end(act));
        m[v[i].str] += v[i].z;
        maxs = max({m["Bessie"] , m["Mildred"] , m["Elsie"]});
        vector<string>news = all_maxs(maxs); sort(begin(news) , end(news));

        if(news != act)
            sol++;

        }
    cout << sol << '\n';
}

int32_t main()
{
    setIO("measurement");
    //cin >> x;
    while(x--)
       solve();
}
/*
Recuerda el overflow aunque no lo veas
 */
